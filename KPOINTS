üß™ KPOINTS Convergence Automation Script (VASP)

This Python script automates k-point mesh convergence testing by generating a series of calculation directories with increasing k-point grids.
It also prepares job submission scripts (job.sh) and submits them to a SLURM scheduler.

‚úÖ Goal: Find a k-point mesh where the total energy becomes stable.

üìú Python Script (k-points.py)

import os

# --- Settings ---
K_START = 1          # Starting k-point value
K_END = 21           # Ending k-point value (exclusive)
K_INCREMENT = 2      # Step size (e.g., 1, 3, 5, ..., 19)

# Loop over k-point grid sizes
for K in range(K_START, K_END, K_INCREMENT):
    dir_name = f"{K}_{K}_1"                    # e.g., 1_1_1, 3_3_1, etc.
    os.makedirs(dir_name, exist_ok=True)
    os.chdir(dir_name)

    # Copy necessary VASP input files
    os.system("cp ../INCAR ../POSCAR ../POTCAR .")

    # Write KPOINTS file for Monkhorst-Pack mesh
    with open("KPOINTS", "w") as file:
        file.write("Automatic k-mesh\n")
        file.write("0\n")
        file.write("Monkhorst Pack\n")
        file.write(f"{K} {K} 1\n")

    # Create SLURM job script
    with open("job.sh", "w") as file:
        file.write("""#!/bin/bash
#SBATCH -J kpoints
#SBATCH -o kpoints.o%j
#SBATCH --mail-user=youremail@domain.com
#SBATCH --mail-type=END
#SBATCH --ntasks-per-node=5 
#SBATCH -N 1
#SBATCH -t 10:10:00
#SBATCH --mem-per-cpu=5GB

mpirun -n 5 $VASPCPUDIR/vasp_std | tee vasp.out
""")

    # Submit the job
    os.system("sbatch job.sh")

    # Return to the parent directory
    os.chdir("..")


üìå Notes
Ensure your current directory contains: INCAR, POSCAR, and POTCAR.

Modify mpirun -n 5 $VASPCPUDIR/vasp_std | tee vasp.out according to your HPC's VASP run command.

Replace youremail@domain.com with your actual email address.

Adjust ntasks-per-node, memory (--mem-per-cpu), and wall time (-t) based on your SLURM cluster configuration.

With K_INCREMENT = 2, the script will generate calculations for k-points:
1√ó1√ó1, 3√ó3√ó1, 5√ó5√ó1, ..., up to 19√ó19√ó1.

üìÇ The script is named k-points.py. Run it using:

python k-points.py

üîç After Running
Once all jobs have finished:

Extract total energies from each OUTCAR or vasp.out file.

Plot total energy vs. k-point mesh (e.g., K = 1, 3, 5, ...).

Identify the smallest k-point mesh where energy change becomes negligible ‚Äî that is your converged k-point setting.


üì§ Extracting Total Energies for KPOINTS Convergence
Once your VASP jobs are complete, you can extract the total energies (E‚ÇÄ) from each vasp.out file using the following Python script.

**Save this script** as energy_kpoints.py and run it with:

python energy_kpoints.py

üìú Python Script: energy_kpoints.py

import os

# Base directory containing subdirectories for different KPOINTS
base_dir = "...../POSCAR_000/KPOINT"

# Name of the VASP output file
target_file = "vasp.out"

# Output file to save total energy results
output_file = os.path.join(base_dir, "total_energy")

# Open output file to write energy values
with open(output_file, 'w') as output:
    # Write header
    output.write("KPOINT , E0\n")

    # Traverse subdirectories under base_dir
    for root, dirs, files in os.walk(base_dir):
        if target_file in files:
            # Extract KPOINT info from folder name
            KPOINTS = os.path.basename(root)
            if KPOINTS.replace("_", "").isdigit():  # e.g., "3_3_1"
                file_path = os.path.join(root, target_file)

                # Read vasp.out and extract E0
                with open(file_path, 'r') as file:
                    for line in file:
                        if "E0=" in line:
                            items = line.split()
                            try:
                                e0_value = float(items[4])  # Assumes E0 is the 5th item
                                output.write(f"{KPOINTS} , {e0_value:.6f}\n")
                                print(f"KPOINT: {KPOINTS} , E0: {e0_value:.6f}")
                            except (IndexError, ValueError):
                                print(f"[!] Error parsing E0 in: {file_path}\nLine: {line}")

üìå Notes:
This script assumes vasp.out contains lines with the format:
free energy TOTEN = ... E0= ... d E = ...
where E0 is the fifth item in the line.

Update base_dir and output_file with your correct paths.

The script will write a file named total_energy under the KPOINT directory.

You can then plot the energy vs. k-point grid using matplotlib


üìä Plotting K-Point Mesh Convergence
After extracting total energies for different K-point meshes, you can visualize the convergence behavior using the following Python script.

üìÅ Save this script as plot_kpoints.py, and run it with:

python plot_kpoints.py

üìú Python Script: plot_kpoints.py

import matplotlib.pyplot as plt
import numpy as np

# Define K-point mesh sizes and corresponding total energies [replace with your actual data]
k_mesh_sizes = [1, 3, 5, 7, 11]
total_energy_kmesh = [...., ...., ...., ...., ....]  # <-- Fill in your energy values here

plt.figure(figsize=(8, 6))
plt.plot(k_mesh_sizes, total_energy_kmesh, marker='o', color='g', label='Total Energy')

# Plot convergence line
E_final = total_energy_kmesh[-1]
plt.axhline(y=E_final, color='r', label='Final Energy')
plt.axhline(y=E_final + 0.001, linestyle='dotted', color='b', label='¬±1 meV Threshold')
plt.axhline(y=E_final - 0.001, linestyle='dotted', color='gray')

# Labels and title
plt.xlabel('K-Point Mesh Size', fontsize=12)
plt.ylabel('Total Energy [eV]', fontsize=12)
plt.title('K-Point Mesh Convergence', fontsize=14)
plt.xticks(k_mesh_sizes)
plt.legend(fontsize=10)

plt.grid(True)
plt.tight_layout()
plt.show()


üìå Notes
Replace the placeholder total_energy_kmesh list with your extracted total energy values (from total_energy file).

The script draws horizontal lines at ¬±0.001 eV to help identify convergence.

Once the energy levels off and stays within a small threshold (e.g., ¬±1 meV), you can consider that K-point mesh as converged.

This plot is useful to visually confirm that increasing the mesh size no longer significantly changes the total energy.




